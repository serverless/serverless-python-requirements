import { symlink, cp } from 'fs/promises';
import { join } from 'path';
import AdmZip from 'adm-zip';
import { exists, sha256Path, getRequirementsLayerPath } from './shared.js';

/**
 * Zip up requirements to be used as layer package.
 * @return {Promise} the AdmZip object constructed.
 */
async function zipRequirements() {
  const src = join('.serverless', 'requirements');
  const reqChecksum = await sha256Path(join('.serverless', 'requirements.txt'));
  const targetZipPath = join('.serverless', 'pythonRequirements.zip');
  const zipCachePath = getRequirementsLayerPath(
    reqChecksum,
    targetZipPath,
    this.options,
    this.serverless
  );

  if (await exists(zipCachePath)) {
    let layerProgress = this.progress.get('python-layer-requirements');
    layerProgress.update('Using cached Python Requirements Lambda Layer file');
    this.log.info('Found cached Python Requirements Lambda Layer file');
  } else {
    const runtimepath = 'python';
    const zip = new AdmZip();
    await zip.addLocalFolderPromise(src, {
      zipPath: runtimepath,
    });
    await zip.writeZipPromise(zipCachePath);
  }
  if (zipCachePath !== targetZipPath) {
    if (process.platform === 'win32') {
      await cp(zipCachePath, targetZipPath, { recursive: true });
    } else {
      await symlink(zipCachePath, targetZipPath, 'file');
    }
  }
}

/**
 * Creates a layer on the serverless service for the requirements zip.
 * @return {Promise} empty promise
 */
async function createLayers() {
  if (!this.serverless.service.layers) {
    this.serverless.service.layers = {};
  }
  this.serverless.service.layers['pythonRequirements'] = Object.assign(
    {
      artifact: join('.serverless', 'pythonRequirements.zip'),
      name: `${
        this.serverless.service.service
      }-${this.serverless.providers.aws.getStage()}-python-requirements`,
      description:
        'Python requirements generated by serverless-python-requirements.',
      compatibleRuntimes: [this.serverless.service.provider.runtime],
    },
    this.options.layer
  );
  return Promise.resolve();
}

/**
 * Creates a layer from the installed requirements.
 * @return {Promise} the combined promise for requirements layer.
 */
async function layerRequirements() {
  if (!this.options.layer) {
    return;
  }

  let layerProgress = this.progress.get('python-layer-requirements');
  layerProgress.update('Packaging Python Requirements Lambda Layer');
  this.log.info('Packaging Python Requirements Lambda Layer');

  try {
    await zipRequirements.bind(this)();
    await createLayers.bind(this)();
  } finally {
    layerProgress.remove();
  }
}

export { layerRequirements };
